#!/bin/bash
#
# package-sideload - Allows runtime installation of sideloaded packages
# Copyright (C) 2021 Eugenio "g7" Paolantonio <me@medesimo.eu>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the <organization> nor the
#      names of its contributors may be used to endorse or promote products
#      derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This script creates a flashable feature bundle that can be used with
# package-sideload.
# This script should be run inside the same environment bundles should
# go to - i.e. during rootfs creation.

set -e

BUNDLE_SKELETON="/usr/share/package-sideload/skeleton"

info() {
	echo "I: $@"
}

warning() {
	echo "W: $@" >&2
}

error() {
	echo "E: $@" >&2
	exit 1
}

help() {
	cat <<EOF
$0 - creates a flashable feature bundle that can be used with package-sideload

USAGE: $0 /path/to/result/file.zip [package1] [package2] .. [packageN]

The feature bundle name is picked up from the target filename.
EOF
}

cleanup() {
	[ -e "${tmpdir}" ] && rm -rf "${tmpdir}"
}

########################################################################

case "${1}" in
	"-h"|"--help")
		help
		exit 0
		;;
	"")
		error "You should specify a target path and the list of packages to install. Use $0 --help for more details"
		;;
	*)
		[ -n "${2}" ] || error "You haven't specified the packages to download. Use $0 --help for more details"

		target_file="${1}"
		bundle_name="$(basename ${target_file})"
		bundle_name="${bundle_name/.zip/}"
		shift
		;;
esac

packages="${@}"

[ -n "${packages}" ] || error "No packages specified! Use $0 --help for more details"

tmpdir="$(mktemp -d)"
trap cleanup EXIT

info "Creating feature bundle in ${target_file}"

# Download packages
apt_config_dir="${tmpdir}/_apt"
pkg_extract_dir="${tmpdir}/_pkg_extract"
systemtree="${tmpdir}/system"
pkgdir="${systemtree}/var/cache/package-sideload/bundles/${bundle_name}"
state_dir="${pkgdir}/apt-state"
overlay_dir="${pkgdir}/apt-overlay"

cp -R /etc/apt "${apt_config_dir}"
mkdir -p "${state_dir}"
mkdir -p "${overlay_dir}"

# Store package list
adaptation_packages=""
for package in ${packages}; do
	if [[ ${package} == adaptation-* ]]; then
		# If an adaptation package has been specified, download it
		# first and hunt for custom repositories and pinning rules.
		# This allows to properly handle custom repositories and pinning
		# rules so that they can be honoured during the feature bundle
		# installation.
		adaptation_packages="${adaptation_packages} ${package}"
	fi
	echo "${package}" >> ${pkgdir}/packages
done

info "Preparing APT configuration"

for dir in sources.list.d preferences.d trusted.gpg.d; do
	mkdir -p ${apt_config_dir}/${dir}
	mkdir -p ${overlay_dir}/${dir}
done

if [ -n "${adaptation_packages}" ]; then
	# Download using apt-get download
	adaptation_download_target="${tmpdir}/_adaptation"
	mkdir -p "${adaptation_download_target}"
	(cd "${adaptation_download_target}" ; apt-get download ${adaptation_packages})

	for package in ${adaptation_packages}; do
		# TODO: Move package extraction to a function?
		mkdir -p "${pkg_extract_dir}"
		dpkg-deb -x ${adaptation_download_target}/${package}_*.deb ${pkg_extract_dir}

		# Handle package lists
		for repository in $(find ${pkg_extract_dir} -wholename '*/sources.list.d/*.list' -type f); do
			[ ! -L "${repository}" ] || continue
			info "Found extra repository description $(basename ${repository})"
			cp ${repository} ${apt_config_dir}/sources.list.d/
			cp ${repository} ${overlay_dir}/sources.list.d/
		done

		# Handle apt pinning preferences
		for preference in $(find ${pkg_extract_dir} -wholename '*/preferences.d/*' -type f); do
			[ ! -L "${preference}" ] || continue
			info "Found extra pinning preference $(basename ${preference})"
			cp ${preference} ${apt_config_dir}/preferences.d/
			cp ${preference} ${overlay_dir}/preferences.d/
		done

		# Handle extra gpg keys
		for gpg in $(find ${pkg_extract_dir} -wholename '*/trusted.gpg.d/*' -type f); do
			[ ! -L "${gpg}" ] || continue
			info "Found extra GPG key $(basename ${gpg})"
			cp ${gpg} ${apt_config_dir}/trusted.gpg.d/
			cp ${gpg} ${overlay_dir}/trusted.gpg.d/
		done

		# Handle extra packages we should download and that the adaptation
		# package conveniently tells us - this is only used by package-sideload-create
		# and not by our receiver.
		# This can also be used to "forcibly downgrade" packages, provided
		# APT pins are in place.
		for package_list in $(find ${pkg_extract_dir} -wholename '*/package-sideload-create.d/*' -type f); do
			[ ! -L "${package_list}" ] || continue
			info "Found extra package list $(basename ${package_list})"
			packages="${packages} $(tr '\n' ' ' < ${package_list})"
			cat "${package_list}" >> ${pkgdir}/packages
		done

		rm -rf "${pkg_extract_dir}"
	done

	rm -rf "${adaptation_download_target}"
fi

info "Downloading packages"

/usr/bin/apt-get \
	--option "dir::etc=${apt_config_dir}" \
	--option "dir::cache=${pkgdir}" \
	--option "dir::state=${state_dir}" \
	--option "Debug::NoLocking=1" \
	update

/usr/bin/apt-get \
	--option "dir::etc=${apt_config_dir}" \
	--option "dir::cache=${pkgdir}" \
	--option "dir::state=${state_dir}" \
	--option "Debug::NoLocking=1" \
	--assume-yes \
	--download-only \
	--allow-downgrades \
	--reinstall \
	install \
	${packages}

# Remove package cache
rm -f ${pkgdir}/*.bin

info "Creating trigger symlink"

# Create trigger symlink to allow booting in the system-update target
ln -s /var/cache/package-sideload "${systemtree}/system-update"

# Now create the payload archive
info "Creating payload archive"

tar -C "${systemtree}" -cvf ${tmpdir}/payload.tar ./

# Extract kernel if we should
bootimage_packages=""
for package in ${pkgdir}/archives/*.deb; do
	if [[ $(basename ${package}) == linux-bootimage-*.deb ]]; then
		bootimage_packages="${bootimage_packages} ${package}"
	fi
done
if [ -n "${bootimage_packages}" ]; then
	info "Extracting bootimage to allow flashing via recovery"

	for package in ${bootimage_packages}; do
		# TODO: Move package extraction to a function?
		mkdir -p "${pkg_extract_dir}"
		dpkg-deb -x ${package} ${pkg_extract_dir}
		bootimage=$(find ${pkg_extract_dir} -iname boot.img* -type f | head -n 1)

		if [ -e "${bootimage}" ]; then
			info "Bootimage found"
			mv ${bootimage} ${tmpdir}/boot.img
		fi

		rm -rf "${pkg_extract_dir}"
		[ ! -e ${tmpdir}/boot.img ] || break
	done
fi

info "Preparing feature bundle"

cp -Rav ${BUNDLE_SKELETON}/* ${tmpdir}

# Remove systemtree as it's now inside the payload.tar archive
rm -rf "${systemtree}"
rm -rf "${apt_config_dir}"

# Create zip file
(cd ${tmpdir} ; zip -r "${target_file}" *)

info "Finished, zip file created in ${target_file}"
